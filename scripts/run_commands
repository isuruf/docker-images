#!/bin/bash -il

set -exo pipefail

export additional_channel=""

export miniforge_arch="$(uname -m)"
export miniforge_version="23.3.1-1"
export python_version="3.10"  # should match the one provided in miniforge
export condapkg="https://github.com/conda-forge/miniforge/releases/download/${miniforge_version}/Miniforge3-${miniforge_version}-Linux-${miniforge_arch}.sh"
if [ "$(uname -m)" = "x86_64" ]; then
   export conda_chksum="b3e14bd70f99bc8959445fad3532128a6af36c5e77bc62226db0e80d1df0e9e9"
elif [ "$(uname -m)" = "ppc64le" ]; then
   export conda_chksum="2eafa28fee5f1dfffb01feaca70de000f8e8335e1f659603ef0b9a40b9d1f213"
elif [ "$(uname -m)" = "aarch64" ]; then
   export conda_chksum="dc5d94b83251621f088bd82df896ea45e63597293ece7ccd923b2346aed34b89"
else
   exit 1
fi

# give sudo permission for conda user to run yum (user creation is postponed
# to the entrypoint, so we can create a user with the same id as the host)
echo 'conda ALL=NOPASSWD: /usr/bin/yum' >> /etc/sudoers
# give sudo permission to copy the cuda headers and libraries for cross compilation
echo 'conda ALL=NOPASSWD: /usr/bin/cp -r /opt/conda/targets/x86_64-linux /usr/local/cuda/targets/x86_64-linux' >> /etc/sudoers
echo 'conda ALL=NOPASSWD: /usr/bin/cp -r /opt/conda/targets/ppc64le-linux /usr/local/cuda/targets/ppc64le-linux' >> /etc/sudoers
echo 'conda ALL=NOPASSWD: /usr/bin/cp -r /opt/conda/targets/sbsa-linux /usr/local/cuda/targets/sbsa-linux' >> /etc/sudoers

# Install the latest Miniconda with Python 3 and update everything.
curl -s -L $condapkg > miniconda.sh
sha256sum miniconda.sh | grep $conda_chksum

bash miniconda.sh -b -p /opt/conda
rm -f miniconda.sh

# Work around TLS issues while updating conda's python and retrieving channel notices
export CONDA_NUMBER_CHANNEL_NOTICES="0"
touch /opt/conda/conda-meta/pinned
ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
source /opt/conda/etc/profile.d/conda.sh
conda activate
conda config --set show_channel_urls True
conda config --set channel_priority strict
conda config ${additional_channel} --add channels conda-forge
conda config --show-sources

# Update everything first
mamba update --yes --all

# Ensure conda build, deployment and docker tools are present
mamba install --yes --quiet \
    "python=$python_version" \
    git \
    patch \
    pip \
    conda-build \
    anaconda-client \
    su-exec \
    tini

# Clean to reduce image size
conda clean -tipy

# Install docker tools
export CONDA_SUEXEC_INFO=( `conda list su-exec | grep su-exec` )
echo "su-exec ${CONDA_SUEXEC_INFO[1]}" >> /opt/conda/conda-meta/pinned
export CONDA_TINI_INFO=( `conda list tini | grep tini` )
echo "tini ${CONDA_TINI_INFO[1]}" >> /opt/conda/conda-meta/pinned

# Lucky group gets permission to write in the conda dir
groupadd -g 32766 lucky
chown -R $USER /opt/conda
chgrp -R lucky /opt/conda && chmod -R g=u /opt/conda

# Download QEMU binaries
qemu_version='8.1.2'
qemu_build='1.fc40'
for arch in aarch64 ppc64le s390x; do
    curl -sL \
        "https://kojipkgs.fedoraproject.org//packages/qemu/${qemu_version}/${qemu_build}/x86_64/qemu-user-static-${arch/ppc64le/ppc}-${qemu_version}-${qemu_build}.x86_64.rpm" |
        /opt/conda/bin/bsdtar -xf- --strip-components=3 ./usr/bin/qemu-${arch}-static
done
sha256sum --check << 'EOF'
955be1e1f1e0ed1f5180d35db92012be558bd860d90a189276b445b6ba9a46c9  qemu-aarch64-static
02b20dbf38e69a12d942c5fb1477160bab9da3fd428246e8fe011a2adced0fb6  qemu-ppc64le-static
9e7d91557640d5ff4209f5894d2e648373752bdb7b664038ceddc371044b79e4  qemu-s390x-static
EOF

for arch in aarch64 ppc64le s390x; do
    mv qemu-${arch}-static /usr/bin/qemu-${arch}-static
done
